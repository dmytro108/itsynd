apiVersion: apps/v1
kind: Deployment
metadata:
  name: db
  namespace: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      db: postgres

  template:
    metadata:
      labels:
        db: postgres 
        tier: db

    spec:
      volumes:
      - name: db-storage
        persistentVolumeClaim:
          claimName: pvc-postgres

      containers:
      - name: postgres
        image: postgres:alpine
        imagePullPolicy: IfNotPresent        
        # --------- DB Configuration
        envFrom:
        - secretRef:
            name: db-credentials
        - configMapRef:
            name: db-config
        ports:
        - containerPort: {{ .Values.DB.Port }}
        # ---------- Health check
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 5
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - $(POSTGRES_USER)
          initialDelaySeconds: 30
          periodSeconds: 5
        # ----------- Storrage
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: db-storage
        # ----------- Resources
        resources:
          requests:
            memory: "128Mi"
            cpu: "500m"
          limits:
            memory: "256Mi"
            cpu: "1000m"
        # ------------ Security
        securityContext:
          allowPrivilegeEscalation: false
        # --------------- End

